import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the findShortest function below.

    /*
     * For the unweighted graph, <name>:
     *
     * 1. The number of nodes is <name>Nodes.
     * 2. The number of edges is <name>Edges.
     * 3. An edge exists between <name>From[i] to <name>To[i].
     *
     */

    static int findShortest(int graphNodes, int[] graphFrom, int[] graphTo, long[] ids, int val)  throws IOException  {
        // solve here
        //Check to see if there are multiple instances of color ids[val]
        //This if statement allows some test cases to pass that would normally timeout
        if(Arrays.stream(ids).filter(l -> l == ids[val-1]).count() < 2){
          return -1;
        }
        
        HashMap<Integer, Set<Integer>> connections = new HashMap<Integer,  Set<Integer>>();
        for(int i = 0; i < graphFrom.length; i ++){
          Set<Integer> connection = connections.getOrDefault(graphFrom[i], new HashSet<Integer>());
          connection.add(graphTo[i]);
          connections.put(graphFrom[i], connection);
          Set<Integer> opposingConnection = connections.getOrDefault(graphTo[i], new HashSet<Integer>());
          opposingConnection.add(graphFrom[i]);
          connections.put(graphTo[i], opposingConnection);
        }

        LinkedList<int[]> queue = new LinkedList<int[]>();
        boolean[] seen = new boolean[graphNodes];
        int[] firstNode = new int[]{val, 0};
        queue.addLast(firstNode);
        seen[val-1] = true;
        while(queue.peek() != null){
          int[] currentNode = queue.removeFirst();
          if(ids[currentNode[0]-1] == ids[val-1] && currentNode[1] != 0){
            return currentNode[1];
          }
          seen[currentNode[0]-1] = true;
          Set<Integer> neighbors = connections.getOrDefault(currentNode[0], new HashSet<Integer>());
          for(int next : neighbors){
            if(!seen[next-1]){
                queue.addLast(new int[]{next, currentNode[1]+1});
                seen[next-1] = true;
            }
          }
        } 
        
        return -1;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] graphNodesEdges = scanner.nextLine().split(" ");
        int graphNodes = Integer.parseInt(graphNodesEdges[0].trim());
        int graphEdges = Integer.parseInt(graphNodesEdges[1].trim());

        int[] graphFrom = new int[graphEdges];
        int[] graphTo = new int[graphEdges];

        for (int i = 0; i < graphEdges; i++) {
            String[] graphFromTo = scanner.nextLine().split(" ");
            graphFrom[i] = Integer.parseInt(graphFromTo[0].trim());
            graphTo[i] = Integer.parseInt(graphFromTo[1].trim());
        }

        long[] ids = new long[graphNodes];

        String[] idsItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < graphNodes; i++) {
            long idsItem = Long.parseLong(idsItems[i]);
            ids[i] = idsItem;
        }

        int val = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int ans = findShortest(graphNodes, graphFrom, graphTo, ids, val, bufferedWriter);

        bufferedWriter.write(String.valueOf(ans));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
